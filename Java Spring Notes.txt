=========================================================================================================================================================================================================================
																JAVA SPRING
=========================================================================================================================================================================================================================
Source code link:
	 - https://github.com/darbyluv2code/spring-boot-3-spring-6-hibernate-for-beginners/blob/main/11-appendix/course-links.md
	 
Spring:
	 - a very popular framework for building Java applications.
	 - provides a large number of helper classes and annotations.
	 
	 problem in building a traditional spring application:
		 - difficult to choose the jar dependency
		 - choose which configuration to use... xml or java
		 - how to install server... Tomcat, JBoss...
		 
	 - Spring Boot:
		 - Spring Boot makes it easy to work/get started on Spring development
		 - it minimizes the amount of manual configuration
			 - it performs auto-configurations based on props file and jAR classpath
		 - helps to resolve dependency conflicts(Maven or gradle)
		 - provides an embedded http server which supports Tomcat,Jetty, Undertow....
			 - no need to install sever seperately, JAR file will cotain application code and server(ex: mycoolapp.jar)
			 - as spring boot includes an embedded server, apring boot apps can be run standalone
				 - i.e we can run spring boot aps from IDE or command line.
				 
		 - Spring Boot uses Spring behind the scenes and makes it easier to use Spring.
		 
	 - Spring Initializr:
		 - a website/app to quickly create a spring boot project
		 - http://start.spring.io
		 - helps to create maven or gradle project
		 
		 - creating a spring boot project:
			 - go to link http://start.spring.io
			 - Select Project as Maven
			 - Select Language as JAVA
			 - Select Spring Boot version(latest one, avoid selecting snapshot/beta vesrion)
			 - enter the project details and select java version
			 - select dependencies(ex: Spring Web)
			 - Click on Generate to download the zip file.
			 - Unzip the file
			 - Import the maven project in IDE
			 
	 - Deploying Spring Boot apps:
		 - Spring Boot applications can be deployed in traditional ways:
			 - deploy WAR file to an external server: Tomcat, JBoss, WebSphere
			 
	 - Spring Boot uses Spring MVC, Spring REST, Spring Core.... in the background(hence it does not replace them)
		
Creating a REST controller in spring boot:
	 - @RestController
		 - used to create a REST controller
		 - added above the class/function definition
		 
	 - @GetMapping:
		 - used to handle http GET requests
		 
Goal/Need of Spring framework:
	 - Lightweight development with Java POJOs(Plain Old Java Objects)
	 - Dependency injection to promote loose coupling
	 - Minimize Boilerplate Java code
	 
Spring Core Container:
	 - it is a factory for creating beans and managing bean dependencies

Aspect Oriented Programming:
	 - It is used to add functionality to Objects
	 - i.e we can create seperate services for logging, Security, Transactions... and apply them to our application

Spring projects:
	 - additional spring modules/add-ons built on top of the core Spring framework.
	 - Ex:
		 - Spring cloud -> for cloud integerations
		 - Spring Data -> for database integration
		 - Spring Batch -> for creating batch processes
		 - Spring Security -> for Securing applications
		 - Spring Web services -> Creating REST and SOAP APIs
		 - Spring LDAP -> accessing LDAP servers
		 
Maven:
	 - Maven is a project management tool for an application
	 - maven is used for build management and dependencies.
	 
	 - when we build a Java project, we need to download jar files manually and need to manually add it to build path/classpath
	 - Maven is a utility/framework which is used to automate downlaoding JAR files.
	 - we need to define/specify the type of dependency we need to download.
	 - maven will make those JAR files available during compile/run.
	 - Maven will also add the JAR files to the project classpath(this will be defined in config).

	 - maven will also download the subdependencies required for running the dependency automatcially.
	 
	 How Maven downloads jar files:
		 - the jar files will be present in remote maven central respository.
		 - Maven will read the config file(pom.xml) of our application
		 - Maven will then check if jar files are present in maven local repository.
		 - if jar files are present in local repo, maven will use them to build and run application
		 - if jar files are not present in local repo, the maven will download the jar files from remote repo through the internet
		 - and then store the jar files in local repo(local cache)
		 - then use the jar files to build and run the application
		 
	 - advantages of Maven:
		 - dependency management(no more missing dependencies/jar files)
		 - build and run project(no more buildpath/classpath issues)
		 - standard directory structure
		 
Maven key concepts:
	 - pom.xml file:
		 - Project Object Model file
		 - define the dependency configuration for the project
		 - always located in the root directory of maven project.
		 
	 - POM file structure:
		 - pom.xml
			 - project metadata
				 - gives details about the project such as Name, version, Output file type(WAR/JAR)
			 - project dependencies
				 - defines the list of projects/libraries the application depends on(Spring Hiberbate,...)
			 - plugins
				 - defines additinal custom tasks which needs to be run
				 - such as generating unit test reports etc..
				 
		 - project coordinates:
			 - it is used to uniquely identify a project
			 - groupId, artifactId, version... which are similar to city, street and house number in GPS cordinates
			 - see PPT for more info
			 - GAV - GroupId, ArtifactId, Version ---> Nomenclature in Java world(good to know)
			 - link to find dependency cordinates:
				 - https://central.sonatype.com/
		 
Maven Project Structure:
	 - check PPT
	 
	 - Maven Wrapper files:
		 - mvnw files/,aven wrapper files allows us to run Maven project
		 - if the correct version of maven is not present in teh computer, 
			 - then it will automaticallly download the correct version and runs Maven
		 - mvnw.cmd -> for Windows -> mvnw clean compile test
		 - mvnw.sh -> for Linux/Mac -> ./mvnw clean compile test
		 
		 - if we already have maven installed locally then maven wrapper files are not required.
		 - use mvn clean compile test
		 
	 - Application properties:
		 - By default, Spring Boot will load properties from application.properties file.
		 - application.properties file is created by spring initializr.
			 - coach.name = "Mickey"
		 
		 - we can read the values from .properties file by injection annotations
			 - @Value("${coach.name}")
			   private String name;
			 
	 - don't use src/main/webapp directory if your application is packaged as a jar.
	 - it only works if your application is packaged as a war file
	 
	 - Templates:
		 - SpringBoot has auto configurations for below template engines.
			 - FreeMarker
			 - Thymeleaf
			 - Mustache

Spring Boot Actuators:
	 - used to expose endpoints, which are used to monitor and manage the application
	 
Spring boot actuator - securing endpoints:
	 - the Secuirty user name is: user
	 - the default generated password will be displayed in console after runnning the program
	 
Running spring boot apps from command line:
	 - running via the jar command:
		 - java -jar jar_name.jar
		 - jar_name.jar -> jar file created in target directory after packaging
		 
	 - using spring boot maven plugin:
		 - mvnw spring-boot:run
		 
	 - to run the spring boot application in command line, go to the spring boot project root directory.
		 
	 - spring boot maven plugin:
		 - it is used to package an application to a jar/war file
			 - mvnw package
		 - it is also used to run the spring boot application
			 - mvnw spring-boot:run
			 
			 
Spring Core:

Inversion of Control:
	 - it is the approach of outsourcing the constructiona nd management of object.
	 - meaning, we will assign another entity which will handle creating and managing objects on our behalf.
	 - ex:
		 - consider an application MyApp.
		 - consider an Object factory which creates objects absed on requirement.
		 - when application requests for a Coach object, object factory will assign a coach(hockey coach, footbal coach...) based on configuration.
	 - in Spring, Spring Container acts like an Object factory
	 
	 - Spring container has two function:
		 - Create and manage objects(Inversion control)
		 - Inject object dependencies(Dpendency injection)
		 
	 - Spring container can be configured in 3 ways:
		 - XML configuration(legacy - old)
		 - Java Annotations - modern
		 - Java Source code - modern
		 
Dependency injection:
	 - Dependency injection makes use of the Dependency Inversion principle.
	 - the application delegates another object/entity to provide dependencies for it.
	 - meaning, if an application requests an object and that object is dependant on ceratin components/helper components, then it is assembled before provisioning.
	 
	 - Types of dependency injection:
		 - Constructor injection
		 - Setter injection
		 
AutoWiring:
	 - for dependency injection, spring uses auto wiring.
	 - Spring automatically injects a dependency to a controller by matching the class/interface name. This is called auto wiring.
	 
	 (constructor injection)
	 - @Autowired annotation is used on constructor.
	 - if there is only one constructor, then Autowired annotation is optional.
		 - spring automatically injects the dependency.
	 
	
	 - how dependency is injected:
		 - spring will check if any class/interface is annotated with Component annotation.
		 - if it is annotated, then it will inject the dependency to the class or interface.
		 
	 Spring Bean:
		 - a class which is annotated as @Component is called a Spring Bean.
		 - a Spring Bean is a regular Java class which is managed by Spring.

Constructor injection:
	 - See PPT
	 
Field injection:
	 - injection method which is not recommended by the spring development team(makes it harder to unit test)
	 - we inject the dependencies by setting field values on the class directly.
	 - it is accomplished by java reflection principle
	 
	 - @Autowired annotation is used on the instance variables directly and we do not need to use constructors or setter methods.
	 
Annotation AutoWiring and Qualifiers:
	 - we can use the qualifier annotation in the arguments of constructor or setter functions 
		 - when there are multiple implementations(beans/Components) of an interface
		 - this will help Spring to identify which bean to use.
		 
Primary annotation:
	 - it is used to specify which bean can be implemented/injected by default if there are multiple beans.
	 - @Primary annotation should be added in the Bean class.

Bean Life Cycle methods:
	 - Init configuration of bean:
		 - used to perform custom initializations once the bean is constructed.
		 - to define an init method, we need to use @PostConstruct annotation.
		 - init methods are defined inside the bean class.
		 
	 - Destry configuration of bean:
		 - used to clean up the resources before the application is stopped.
		 - to define a destroy method, we need to use @PreDestroy annotation.
		 - destry methods are defined inside the bean class.
		 
Note:
Prototype Beans and Destroy Lifecycle
There is a subtle point you need to be aware of with "prototype" scoped beans.

For "prototype" scoped beans, Spring does not call the destroy method. Gasp!

---

In contrast to the other scopes, Spring does not manage the complete lifecycle of a prototype bean: 
the container instantiates, configures, and otherwise assembles a prototype object, and hands it to the client, with no further record of that prototype instance.

Thus, although initialization lifecycle callback methods are called on all objects regardless of scope, in the case of prototypes, configured destruction lifecycle callbacks are not called. 
The client code must clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are holding.


Prototype Beans and Lazy Initialization
Prototype beans are lazy by default. There is no need to use the @Lazy annotation for prototype scopes beans.


Java Config Bean:
	 - here we are creating a Bean method(@Bean annotation) by using Configuration Class - @Configuration annotation
	 - then inject the bean id to the controller class.
	 
	 - use case for @Bean annotation:
		 - when using 3rd part or external SDK we cannot use @Component annotation in the 3rd part class as we will not have access.
		 - instead we will create a Bean method to to reference to the 3rd part class and create the Bean.
	

Spring Hibernate:
	 - Hibernate is a framework for persisting/saving java objects in a database.
	 
JPA:
	 - Jakarata Persistence API.
	 - previously known as Java Persistence API.
	 - standarad API used for Object to Relational Mapping
	 
	 - JPA defines a set of interfaces
	 - and to use it we need to create an implementation of the ineterface.
	 
	 Types of JPA vendor implementations:
		 - Hibernate
		 - EclipseLink
		 
	 - Hibernate is the default implementation of JPA in Spring Boot
	 - we can switch implementations easily because we code the ORM code based on JPA specific instructions.
		 - we just need to make configurational changes.
		 
	 - Hibernate JPA makes use of JDBC in the background to make database communications.
	 
Command line runner:
	 - Command line runner is hook from spring framework
	 - it allows to execute code after the spring beans have been loaded into the application-context.
	 
	 - dependencies for spring hibernate using MySQL:
		 - mySQL driver
		 - spring data jpa
		 
JPA Annotations:
	 - 
	 
Saving Java Object with JPA:
	 - JPA entity manager and Data Source are automatically created by Spring Boot.
		 - by configurations defined in pom.xml file and application.properties file.
		 
	 - Spring Repository annotation provide translation of any JDBC related execptions.
		 - basically converts checked exceptions into unchecked exceptions.
	 
Primary keys:
	 - PK -> Primary Key
	 - NN -> Not Null
	 - AI -> Auto increment
	 - 
	 
Changing Index of MySQL Auto Increement:
	 - use SQL query to change start index from next insert:
		 - ALTER table db_name.table_name AUTO_INCREMENT = start_value;
		 - ALTER table student_tracker.student AUTO_INCREMENT = 3000;(ex..)
		 
	 - reset Auto Increment back to 1:
		 - TRUNCATE student_tracker.student
		 - remove all the records from the table and rest Auto Increment start value to 1.
		 
Reading objects with JPA:

Querying objects with JPA:
	 - JPQL:
		 - JPA Query language
		 
	 - JPQL Named parameters:
		 - we can add parameters to JPA queries by using JPQL named parameters.
		 - the named paramter can be updated with any data we provide
		 - lastName = :named_Parameter
		 
REST services:
	 - Representational State Transfer
	 
JSON:
	 - javaScript Object Notation
	 
Spring Boot Rest HTTP basics:
	 - HTTP request message consists of 3 parts:
		 - Request line: contains the HTTP method(GET, POST....)
		 - header variables: contains meta data(content-type, token....) of request
		 - message body: content of the message request
		 
	 - HTTP response message consists of 3 parts:
		 - Request line: consistes of server protocol and status code(define status of request)
		 - header variables: response metadata(line content-type, data size, etc...)
		 - message body: content of the response message
		 
Java POJO:
	 - Java POJO is a plane java object or Java class.
	 - Jackson is a very popular JSON data binding project
		 - used to convert JSON data to Java object or vice versa
		 - Spring boot starter web automatically includes dependency for Jackson
		 
	     - we have to define the POJO class and setter and getter methods inside the class
		 - Jackson will automatically access the setter methods and convert JSON data to POJO objects.
		 - Jackson will automatically access the getter methods and convert Java POJO data to JSON.
		 
		 - Spring automatically handles Jackson integration.
	 
Spring REST - with Path variables:
	 - @PathVariable annotation:
		 - it is used to bind the parameter passed in the url with the request method argument.
		 - by default name of the PathVariable in url and method argument should be same.
	 
Exception handler:
	 - @ControllerAdvice annotation:
		 - it is used to perform pre-process or post-process requests for rest controller api calls.
		 - this acts as a global service and multiple controllers can make use of it
		 - global exceptional handling
		 
Spring REST API design:
	 - 
		
for automatic reloading of application server:
	 - use spring dev tools depedency from spring.start.io
	 - to configure intellij IDE to use dev tools dependency	
		 - go to settings
			 - select Build, Execution, Deployment
			 - Select Compiler
			 - Click on build project automatically option
			 - Click on Advanced settings
			 - Select Allow auto make to start even if application is running.
			 
Defining service layer using spring boot:
	 - use of service layer:
		 - helps to provide controller with a single view of data that is integrated from multiple backen sources.
		 - best practice is to create a seperate service layer and seperate DAO layer.
		 
	 - @Service annotation:
		 - Service annotation is used to specify a class which implements Service interface.
		 - @Service annotation is used to automatically denote the class as a Service implementation for component scanning